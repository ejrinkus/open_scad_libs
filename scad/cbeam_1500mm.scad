// Generated by SolidPython 1.1.3 on 2022-04-28 23:53:19


difference() {
	union() {
		difference() {
			cube(size = [20.0000000000, 20.0000000000, 100]);
			translate(v = [5.1000000000, 0, 0]) {
				linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
					polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
				}
			}
			translate(v = [0, 14.9000000000, 0]) {
				rotate(a = [0, 0, 270]) {
					linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
						polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
					}
				}
			}
			translate(v = [14.9000000000, 0, 0]) {
				translate(v = [0, 20.0000000000, 0]) {
					rotate(a = [0, 0, 180]) {
						linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
							polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
						}
					}
				}
			}
			translate(v = [20.0000000000, 0, 0]) {
				translate(v = [0, 5.1000000000, 0]) {
					rotate(a = [0, 0, 90]) {
						linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
							polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
						}
					}
				}
			}
			translate(v = [0, 10.0000000000, 0]) {
				translate(v = [10.0000000000, 0, 0]) {
					cylinder($fn = 50, h = 100, r = 2.1000000000);
				}
			}
		}
		translate(v = [20, 0, 0]) {
			difference() {
				cube(size = [20.0000000000, 20.0000000000, 100]);
				translate(v = [5.1000000000, 0, 0]) {
					linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
						polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
					}
				}
				translate(v = [0, 14.9000000000, 0]) {
					rotate(a = [0, 0, 270]) {
						linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
							polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
						}
					}
				}
				translate(v = [14.9000000000, 0, 0]) {
					translate(v = [0, 20.0000000000, 0]) {
						rotate(a = [0, 0, 180]) {
							linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
								polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
							}
						}
					}
				}
				translate(v = [20.0000000000, 0, 0]) {
					translate(v = [0, 5.1000000000, 0]) {
						rotate(a = [0, 0, 90]) {
							linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
								polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
							}
						}
					}
				}
				translate(v = [0, 10.0000000000, 0]) {
					translate(v = [10.0000000000, 0, 0]) {
						cylinder($fn = 50, h = 100, r = 2.1000000000);
					}
				}
			}
		}
		translate(v = [0, 20, 0]) {
			difference() {
				cube(size = [20.0000000000, 20.0000000000, 100]);
				translate(v = [5.1000000000, 0, 0]) {
					linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
						polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
					}
				}
				translate(v = [0, 14.9000000000, 0]) {
					rotate(a = [0, 0, 270]) {
						linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
							polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
						}
					}
				}
				translate(v = [14.9000000000, 0, 0]) {
					translate(v = [0, 20.0000000000, 0]) {
						rotate(a = [0, 0, 180]) {
							linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
								polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
							}
						}
					}
				}
				translate(v = [20.0000000000, 0, 0]) {
					translate(v = [0, 5.1000000000, 0]) {
						rotate(a = [0, 0, 90]) {
							linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
								polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
							}
						}
					}
				}
				translate(v = [0, 10.0000000000, 0]) {
					translate(v = [10.0000000000, 0, 0]) {
						cylinder($fn = 50, h = 100, r = 2.1000000000);
					}
				}
			}
		}
		translate(v = [0, 40, 0]) {
			difference() {
				cube(size = [20.0000000000, 20.0000000000, 100]);
				translate(v = [5.1000000000, 0, 0]) {
					linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
						polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
					}
				}
				translate(v = [0, 14.9000000000, 0]) {
					rotate(a = [0, 0, 270]) {
						linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
							polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
						}
					}
				}
				translate(v = [14.9000000000, 0, 0]) {
					translate(v = [0, 20.0000000000, 0]) {
						rotate(a = [0, 0, 180]) {
							linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
								polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
							}
						}
					}
				}
				translate(v = [20.0000000000, 0, 0]) {
					translate(v = [0, 5.1000000000, 0]) {
						rotate(a = [0, 0, 90]) {
							linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
								polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
							}
						}
					}
				}
				translate(v = [0, 10.0000000000, 0]) {
					translate(v = [10.0000000000, 0, 0]) {
						cylinder($fn = 50, h = 100, r = 2.1000000000);
					}
				}
			}
		}
		translate(v = [0, 60, 0]) {
			difference() {
				cube(size = [20.0000000000, 20.0000000000, 100]);
				translate(v = [5.1000000000, 0, 0]) {
					linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
						polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
					}
				}
				translate(v = [0, 14.9000000000, 0]) {
					rotate(a = [0, 0, 270]) {
						linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
							polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
						}
					}
				}
				translate(v = [14.9000000000, 0, 0]) {
					translate(v = [0, 20.0000000000, 0]) {
						rotate(a = [0, 0, 180]) {
							linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
								polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
							}
						}
					}
				}
				translate(v = [20.0000000000, 0, 0]) {
					translate(v = [0, 5.1000000000, 0]) {
						rotate(a = [0, 0, 90]) {
							linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
								polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
							}
						}
					}
				}
				translate(v = [0, 10.0000000000, 0]) {
					translate(v = [10.0000000000, 0, 0]) {
						cylinder($fn = 50, h = 100, r = 2.1000000000);
					}
				}
			}
		}
		translate(v = [0, 60, 0]) {
			translate(v = [20, 0, 0]) {
				difference() {
					cube(size = [20.0000000000, 20.0000000000, 100]);
					translate(v = [5.1000000000, 0, 0]) {
						linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
							polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
						}
					}
					translate(v = [0, 14.9000000000, 0]) {
						rotate(a = [0, 0, 270]) {
							linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
								polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
							}
						}
					}
					translate(v = [14.9000000000, 0, 0]) {
						translate(v = [0, 20.0000000000, 0]) {
							rotate(a = [0, 0, 180]) {
								linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
									polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
								}
							}
						}
					}
					translate(v = [20.0000000000, 0, 0]) {
						translate(v = [0, 5.1000000000, 0]) {
							rotate(a = [0, 0, 90]) {
								linear_extrude(center = false, convexity = 10, height = 100, twist = 0) {
									polygon(points = [[0.0000000000, 0.0000000000], [1.8000000000, 1.8000000000], [-0.6000000000, 1.8000000000], [-0.6000000000, 3.4400000000], [2.0600000000, 6.1000000000], [7.7400000000, 6.1000000000], [10.4000000000, 3.4400000000], [10.4000000000, 1.8000000000], [8, 1.8000000000], [9.8000000000, 0.0000000000], [0.0000000000, 0.0000000000]]);
								}
							}
						}
					}
					translate(v = [0, 10.0000000000, 0]) {
						translate(v = [10.0000000000, 0, 0]) {
							cylinder($fn = 50, h = 100, r = 2.1000000000);
						}
					}
				}
			}
		}
	}
	translate(v = [18.2000000000, 0, 0]) {
		translate(v = [0, 4.5000000000, 0]) {
			cube(size = [3.6000000000, 11, 100]);
		}
	}
	translate(v = [4.5000000000, 0, 0]) {
		translate(v = [0, 18.2000000000, 0]) {
			cube(size = [11, 3.6000000000, 100]);
		}
	}
	translate(v = [4.5000000000, 0, 0]) {
		translate(v = [0, 38.2000000000, 0]) {
			cube(size = [11, 3.6000000000, 100]);
		}
	}
	translate(v = [4.5000000000, 0, 0]) {
		translate(v = [0, 58.2000000000, 0]) {
			cube(size = [11, 3.6000000000, 100]);
		}
	}
	translate(v = [18.2000000000, 0, 0]) {
		translate(v = [0, 64.5000000000, 0]) {
			cube(size = [3.6000000000, 11, 100]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from solid import *
from solid.utils import *  # Not required, but the utils module is useful
from vslot2020 import *

def make_cbeam(height):
    cbeam = make_2020(height);
    cbeam += right(20)(
        make_2020(height)
    );
    cbeam += forward(20)(
        make_2020(height)
    );
    cbeam += forward(40)(
        make_2020(height)
    );
    cbeam += forward(60)(
        make_2020(height)
    );
    cbeam += forward(60)(
        right(20)(
            make_2020(height)
        )
    );

    cbeam -= right(18.2)(
        forward(4.5)(
            cube([3.6, 11, height])
        )
    );

    cbeam -= right(4.5)(
        forward(18.2)(
            cube([11, 3.6, height])
        )
    );

    cbeam -= right(4.5)(
        forward(38.2)(
            cube([11, 3.6, height])
        )
    );

    cbeam -= right(4.5)(
        forward(58.2)(
            cube([11, 3.6, height])
        )
    );

    cbeam -= right(18.2)(
        forward(64.5)(
            cube([3.6, 11, height])
        )
    );

    return cbeam;


scad_render_to_file(make_cbeam(100), '../../scad/cbeam_250mm.scad');
scad_render_to_file(make_cbeam(100), '../../scad/cbeam_500mm.scad');
scad_render_to_file(make_cbeam(100), '../../scad/cbeam_1000mm.scad');
scad_render_to_file(make_cbeam(100), '../../scad/cbeam_1500mm.scad');
scad_render_to_file(make_cbeam(100), '../../scad/cbeam_2000mm.scad'); 
 
************************************************/
